name: magnify Workflow

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - '*'

jobs:
  lint-git:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Ne s'applique que pour les pull requests
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Afficher les logs
        run: git log
      - name: Assurer l'absence d'instructions print dans le code
        run: |
          ! git diff origin/${{ github.event.pull_request.base.ref }}..HEAD -- . ':(exclude)**/magnify.yml' | grep "print("
      - name: Vérifier l'absence de commits fixup
        run: |
          ! git log | grep 'fixup!'
      - name: Installer gitlint
        run: pip install --user requests gitlint
#      - name: Vérifier les messages de commit ajoutés à la branche principale
#        run: ~/.local/bin/gitlint --commits origin/${{ github.event.pull_request.base.ref }}..HEAD
      - name: Run GitLint
        run: gitlint --commits origin/${{ github.event.pull_request.base.ref }}..HEAD

  check-changelog:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Check that the CHANGELOG has been modified in the current branch
      run: git log --name-only --pretty="" origin..HEAD | grep CHANGELOG

  lint-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check CHANGELOG max line length
        run: |
          max_line_length=$(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com" | wc -L)
          if [ $max_line_length -ge 80 ]; then
            echo "ERROR: CHANGELOG has lines longer than 80 characters."
            exit 1
          fi


  

  lint-back:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install development dependencies
        run: pip install --user .[dev]
      - name: Check code formatting with ruff
        run: ~/.local/bin/ruff format magnify --diff
      - name: Lint code with ruff
        run: ~/.local/bin/ruff check magnify
      - name: Lint code with pylint
        run: ~/.local/bin/pylint magnify

  test-back:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: magnify
          POSTGRES_USER: dinum
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DJANGO_CONFIGURATION: Test
      DJANGO_SETTINGS_MODULE: magnify.settings
      DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
      OIDC_OP_JWKS_ENDPOINT: /endpoint-for-test-purpose-only
      DB_HOST: localhost
      DB_NAME: magnify
      DB_USER: dinum
      DB_PASSWORD: pass
      DB_PORT: 5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create writable /data
        run: |
          sudo mkdir -p /data/media && \
          sudo mkdir -p /data/static
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install development dependencies
        run: pip install --user .[dev]
      - name: Install gettext (required to compile messages)
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext
      - name: Generate a MO file from strings extracted from the project
        run: python manage.py compilemessages
      - name: Run tests
        run: ~/.local/bin/pytest -n 2

  i18n-crowdin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install gettext (required to make messages)
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install development dependencies
        working-directory: src/backend
        run: pip install --user .[dev]

      - name: Generate the translation base file
        run: ~/.local/bin/django-admin makemessages --keep-pot --all

      - name: Load sops secrets
        uses: rouja/actions-sops@main
        with:
          secret-file: .github/workflows/secrets.enc.env
          age-key: ${{ secrets.SOPS_PRIVATE }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'yarn'
          cache-dependency-path: src/frontend/yarn.lock

      - name: Install dependencies
        run: cd src/frontend/ && yarn install --frozen-lockfile

      - name: Extract the frontend translation
        run: make frontend-i18n-extract

      - name: Upload files to Crowdin
        run: |
          docker run \
          --rm \
          -e CROWDIN_API_TOKEN=$CROWDIN_API_TOKEN \
          -e CROWDIN_PROJECT_ID=$CROWDIN_PROJECT_ID \
          -e CROWDIN_BASE_PATH=$CROWDIN_BASE_PATH \
          -v "${{ github.workspace }}:/app" \
          crowdin/cli:3.16.0 \
          crowdin upload sources -c /app/crowdin/config.yml

